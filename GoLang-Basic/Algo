ALGOS::


---------------------------------------------------------------------------------------
Insertion sort
import sys
# A = [100, 6, 5, 4, 3, 2, 1, 0]
A = [55, 50, 4, 5, 10, 15, 25, ]    

# Traverse through all array elements
count, comp = 0,0

for i in range(1, len(A)):
  key = A[i]
  left_idx = i-1
  count = 0
  
  while left_idx >= 0 and key < A[left_idx]:  # checks if there is any right element is there AND key left element is smaller than righ one --> then loop will execute
    print(A)
    count +=1

    A[left_idx + 1] = A[left_idx]
    left_idx -= 1
    A[left_idx + 1] = key
  print(count)
 
---------------------------------------------------------------------------------------
Stack :: problem

def isBalanced(s):
    # s = "{{[[(())]]}}"
    stack = []
    open_data = {
        "{":1,
        "[":2,
        "(":3,
    }
    
    close_data = {
        "}":"{",
        "]":"[",
        ")":"(",
    }
    # append all the opening brackets and when any close one encontered check if it's better half was there in the list 
    # if it is in the list pop it
    # we will not push the closeing brackets inside the stack
    for i in list(s):
        if i in open_data:
            stack.append(i)
        elif stack and close_data[i] in stack: # if the better half in the arr pop it
            print(stack)
            stack.remove(close_data[i])
        else:
            return "NO"
    if not stack:
        return "YES"
    else:
        return "NO"
